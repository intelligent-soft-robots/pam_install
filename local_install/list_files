#!/usr/bin/env python3

# print list of files and folders in the
# the colcon install folder.
# Used by the pam_install executable
# (generated by cmake from pam_install.in)

import fnmatch
import typing
import pathlib
import argparse
import traceback
import json
import os
import sys


CONFIG_FILE = "make_install_excluded.json"


def _list_files(path: pathlib.Path, excluded_files: typing.Sequence[str]) -> None:
    # print the list of files in path which basename is not
    # contained in excluded_files (non recursive).
    files = [f.name for f in path.glob('*') if f.is_file()]
    files = [f for f in files if not any([fnmatch.fnmatch(str(f),ex) for ex in excluded_files])]
    for f in files:
        print(f)


def _list_files_recursive(
    path: pathlib.Path, excluded_folders: typing.Sequence[str]
) -> None:
    # print the lists of files (relative path) in path which are not in one
    # of the excluded folder (recursive).
    content = path.glob("**/*")
    content = [c for c in content if not any([ex in str(c) for ex in excluded_folders])]
    content = [c.relative_to(path) for c in content if c.is_file()]
    for c in content:
        print(c)


def _list_folders_recursive(
    path: pathlib.Path, excluded_folders: typing.Sequence[str]
) -> None:
    # print the lists of subfolders (relative path) in path
    # which are not excluded (recursive).
    content = path.glob("**/*")
    content = [c for c in content if not any([ex in str(c) for ex in excluded_folders])]
    content = [str(c)[len(str(path)) + 1 :] for c in content if c.is_dir()]
    for c in content:
        print(c)


def lib_python_folder(
    install_folder: pathlib.Path, display: bool = True
) -> pathlib.Path:
    # returns abs path to /<install_folder>/lib/python3.x/
    path = install_folder / "lib"
    if not path.is_dir():
        raise FileNotFoundError("failed to find: {}".format(path))
    libdirs = [d for d in path.glob("*") if d.is_dir()]
    pythondir = [d for d in libdirs if "python" in str(d)][0]
    if display:
        print(pythondir)
    return pythondir


def lib_python_dist_folder(
    install_folder: pathlib.Path, display: bool = True
) -> pathlib.Path:
    # returns abs path to /<install_folder>/lib/python3.x/site-packages
    # (or /<install_folder>/lib/python3.x/dist-packages)
    pythondir = lib_python_folder(install_folder, display=False)
    libdirs = [d for d in pythondir.glob("*") if d.is_dir()]
    distdir = [
        d
        for d in libdirs
        if any([sd in str(d) for sd in ("site-packages", "dist_packages")])
    ][0]
    if display:
        print(distdir)
    return distdir


def list_lib_files(
    install_folder: pathlib.Path, excluded_files: typing.Sequence[str]
) -> None:
    # for listing (in the current terminal) the files
    # in /<install_folder>/lib (not recursive)
    path = install_folder / "lib"
    if not path.is_dir():
        raise FileNotFoundError("failed to find: {}".format(path))
    _list_files(path, excluded_files)


def list_bin_files(
    install_folder: pathlib.Path, excluded_files: typing.Sequence[str]
) -> None:
    # for listing the file content of /<install_folder>/bin
    # (not recursive)
    path = install_folder / "bin"
    if not path.is_dir():
        raise FileNotFoundError("failed to find: {}".format(path))
    _list_files(path, excluded_files)


def list_include_files(
    install_folder: pathlib.Path, excluded_folders: typing.Sequence[str]
) -> None:
    # for listing the content of /<install folder>/include
    # excluding for example the content of
    # the folders gtest and pybind11
    path = install_folder / "include"
    if not path.is_dir():
        raise FileNotFoundError("failed to find: {}".format(path))
    _list_files_recursive(path, excluded_folders)


def list_include_folders(
    install_folder: pathlib.Path, excluded_folders: typing.Sequence[str]
) -> None:
    # for listing all the subfolders of /<install_folder>/include
    # (recursive)
    path = install_folder / "include"
    if not path.is_dir():
        raise FileNotFoundError("fail to find directory: {}".format(path))
    _list_folders_recursive(path, excluded_folders)


def list_python_folders(
    install_folder: pathlib.Path, excluded_folders: typing.Sequence[str]
) -> None:
    # for listing all the subfolders of
    # /<install_folder>/lib/python3.x/site-packages/
    path = lib_python_dist_folder(install_folder,display=False)
    _list_folders_recursive(path, excluded_folders)


def list_python_files(
    install_folder: pathlib.Path, excluded_folders: typing.Sequence[str]
) -> None:
    # for listing the content of /<install_folder>/include
    # excluding for example the content of
    # the folders gtest and pybind11
    path = lib_python_dist_folder(install_folder,display=False)
    _list_files_recursive(path, excluded_folders)


def _root_dir():
    # returns the path where this file (list_files)
    # is located.
    return os.path.dirname(os.path.abspath(__file__))


def _read_config(config_file: pathlib.Path) -> typing.Dict[str, typing.Sequence[str]]:
    if not config_file.is_file():
        raise FileNotFoundError("failed to find {}".format(config_path))
    with open(config_file) as f:
        config = json.load(f)
    return config


def _arguments():

    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--install-path", type=str, required=True, help="path to the install folder"
    )
    parser.add_argument(
        "--config-path", type=str, required=True, help="path to the config file"
    )
    
    subparser = parser.add_subparsers(dest="command", required=True)
    subparser.add_parser("list-include-folders")
    subparser.add_parser("list-include-files")
    subparser.add_parser("list-bin-files")
    subparser.add_parser("list-lib-files")
    subparser.add_parser("list-python-folders")
    subparser.add_parser("list-python-files")
    subparser.add_parser("display-python-dist-folder")
    
    return parser.parse_args()


def _execute(arguments):

    install_path = pathlib.Path(args.install_path)
    if not install_path.is_dir():
        raise FileNotFoundError("failed to find: {}".format(install_path))

    config_path = pathlib.Path(args.config_path)
    if not config_path.is_file():
        raise FileNotFoundError("failed to find: {}".format(config_path))

    config = _read_config(config_path)

    if args.command == "list-include-folders":
        list_include_folders(install_path, config["include"])

    elif args.command == "list-include-files":
        list_include_files(install_path, config["include"])

    elif args.command == "list-bin-files":
        list_bin_files(install_path, config["bin"])

    elif args.command == "list-lib-files":
        list_lib_files(install_path, config["lib"])

    elif args.command == "list-python-folders":
        list_python_folders(install_path, config["python"])

    elif args.command == "list-python-files":
        list_python_files(install_path, config["python"])

    elif args.command == "display-python-dist-folder":
        lib_python_dist_folder(install_path,display=True)
        

if __name__ == "__main__":

    #try:
    args = _arguments()
    _execute(args)
    #except Exception as e:
    #    print("failed with error:\n{}".format(e))
    #    sys.exit(1)

    sys.exit(0)
